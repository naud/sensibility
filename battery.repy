"""
battery.repy -- trying to use the SL4A JSON bridge to read battery info

Yanyan Zhuang, UBC 

Change log:
v 0.0.1, 20131210 YZ
  Initial experiment, based on the Apache-licensed code in 
  /mnt/sdcard/com.googlecode.pythonforandroid/extras/python/android.py
  
Example output:
total time for batteryStartMonitoring: 76.849937439ms
batteryStartMonitoring :
null 

total time for batteryCheckPresent: 7.32278823853ms
batteryCheckPresent :
true 

battery health data: 1 - unknown; 2 - good; 3 - overheat; 4 - dead; 5 - over voltage; 6 - unspecified failure;
total time for batteryGetHealth: 6.93082809448ms
batteryGetHealth :
2 

total time for batteryGetLevel: 6.83307647705ms
batteryGetLevel :
99 

plug type data: -1 - unknown; 0 - unplugged; 1 - power source is an AC charger; 2 - power source is a USB port
total time for batteryGetPlugType: 8.34798812866ms
batteryGetPlugType :
2 

battery status data: 1 - unknown; 2 - charging; 3 - discharging; 4 - not charging; 5 - full;
total time for batteryGetStatus: 7.35282897949ms
batteryGetStatus :
3 

total time for batteryGetTechnology: 15.0377750397ms
batteryGetTechnology :
Li-ion 

total time for batteryGetTemperature: 14.8468017578ms
batteryGetTemperature :
255 

total time for batteryGetVoltage: 7.56692886353ms
batteryGetVoltage :
4147 

total time for readBatteryData: 7.96699523926ms
readBatteryData :
status : 3 
health : 2 
voltage : 4147 
temperature : 255 
level : 99 
battery_present : true 
technology : Li-ion 
plugged : 2 

total time for batteryStopMonitoring: 7.54117965698ms
batteryStopMonitoring :
null 


"""

def usage():
  log("""
battery.repy -- check out the SL4A JSON interface to battery 
http://www.mithril.com.au/android/doc/AndroidFacade.html
  
Usage:
  1) On your shell, specify the AP_PORT for SL4A to listen on, e.g.
    export AP_PORT=45678
  2) Start SL4A in server mode using am, the Activity Manager, on that port:
    (CAUTION: That's one long line!)
    am start -a com.googlecode.android_scripting.action.LAUNCH_SERVER -n com.googlecode.android_scripting/.activity.ScriptingLayerServiceLauncher --ei com.googlecode.android_scripting.extra.USE_SERVICE_PORT $AP_PORT
  3) Finally, run this program and supply it with the AP_PORT:
    python repy.py restrictionsfile test_sensors.repy $AP_PORT
""")


def sl4a_dic_paser(input):
  # Input a json string, and parse it into json dictionary.
  # We need a real parser!!
  try:
    input = input.replace('null', '"null"')
    input = input.replace('true', '"true"')
    input = input.replace('false', '"false"')
    vn = createvirtualnamespace('json_dic='+input, "eval_json_string")
    result_context = vn.evaluate(_context)
    return result_context['json_dic']
  except Exception, e:
    log("malformed input,", str(e), "\n")
    exitall()
    
    
    
def log_dic(input_dic):
  # Input a json_reply result, the result can be a variable or a dictionary
  if type(input_dic) is dict:
    for element in input_dic:
      log(element, ":")
      if type(input_dic[element]) is dict:
        log("\n")
        log_dic(input_dic[element])
      else:
        log(input_dic[element], "\n")
  else:
    log(input_dic, "\n")
    
    
    
def json_rpc(methodname, *args):  
  args_List = []
  if args != None:
    for param in args:
      args_List.append(param)
  jsonstring = '{"params": ' + str(args_List) + ', "id": 0, "method": "' + methodname + '"}\n'
  bytes_sent = 0
  
  start = getruntime()
  while bytes_sent<len(jsonstring):
    bytes_sent += sl4a_socket.send(jsonstring[bytes_sent:])
    #log("Sent", bytes_sent, "bytes.\n") 
  timeStart = (getruntime() - start)*1000
  #log('time to send ' + methodname + ' command: ' + str(timeStart) + 'ms\n') 
  
  result = ""
  start = getruntime()
  while True:
    try:
      # XXX This is not guaranteed to receive the full result!
      data = sl4a_socket.recv(2000)
      result = result + data
    except SocketWouldBlockError:
      #log('--SocketWouldBlockError in receiving ' + methodname + '.\n')
      if result != "":
        break
      pass
    except SocketClosedRemote:
      pass
  timeDone = (getruntime() - start)*1000
  #log('time to receive from ' + methodname + ': ' + str(timeDone) + 'ms\n')
  
  total_time = timeStart + timeDone
  log('total time for ' + methodname + ': ' + str(total_time) + 'ms\n')
  #log(methodname + ': ' + result + '\n')
  
  result_dic = sl4a_dic_paser(result)
  if not type(result_dic) is dict:
    log("Error parsing.\n")
    exitall()
  #log(methodname,'result: \n', result_dic['result'], '\n')
  log(methodname, ":\n")
  log_dic(result_dic['result'])
  return result_dic
  

if callfunc=="initialize":
  try:
    ap_port = int(callargs[0])
  except:
    # Not castable (-> ValueError) or missing at all (-> IndexError) 
    # That's the user's fault! Teach them!
    usage()
    exitall()
  
  ############## set up connection to sl4a ################
  
  start = getruntime()
  # Connect to SL4A, do some random test.
  sl4a_socket = openconnection("127.0.0.1", ap_port, "127.0.0.1", 12345, 5)
  time_connect = 'time to connect to SL4A: ' + str((getruntime() - start)*1000) + 'ms\n'
  #log(time_connect + '\n')
  
  while True:
    json_rpc("batteryStartMonitoring")
    log('\n')
    
    json_rpc("batteryCheckPresent")
    log('\n')
    
    log("battery health data: 1 - unknown; 2 - good; 3 - overheat; \
    4 - dead; 5 - over voltage; 6 - unspecified failure;\n")
    json_rpc("batteryGetHealth")
    log('\n')
    
    json_rpc("batteryGetLevel")
    log('\n')
        
    log("plug type data: -1 - unknown; 0 - unplugged; 1 - power \
    source is an AC charger; 2 - power source is a USB port\n")
    json_rpc("batteryGetPlugType")
    log('\n')
    
    log("battery status data: 1 - unknown; 2 - charging; \
    3 - discharging; 4 - not charging; 5 - full;\n")
    json_rpc("batteryGetStatus")
    log('\n')
    
    json_rpc("batteryGetTechnology")
    log('\n')
    json_rpc("batteryGetTemperature")
    log('\n')
    json_rpc("batteryGetVoltage")
    log('\n')
    # this call provides all the info above in a dic
    #..what's the point of the above calls?
    json_rpc("readBatteryData")   
    log('\n')
    
    json_rpc("batteryStopMonitoring")
    log('\n')

    sleep(60)
