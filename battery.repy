"""
<Program>
  battery.repy 
  Variables are mostly from: 
  http://www.mithril.com.au/android/doc/BatteryManagerFacade.html
	
<Date Started>
  December 19th, 2013
	
<Author>
  Yanyan Zhuang
	
<Purpose>
  Trying to use the SL4A JSON bridge to read battery info
	 
"""


"""  
Example output:
total time for batteryStartMonitoring: 76.849937439ms
batteryStartMonitoring :
null 

total time for batteryCheckPresent: 7.32278823853ms
batteryCheckPresent :
true 

battery health data: 1 - unknown; 2 - good; 3 - overheat; 4 - dead; 5 - over voltage; 6 - unspecified failure;
total time for batteryGetHealth: 6.93082809448ms
batteryGetHealth :
2 

total time for batteryGetLevel: 6.83307647705ms
batteryGetLevel :
99 

plug type data: -1 - unknown; 0 - unplugged; 1 - power source is an AC charger; 2 - power source is a USB port
total time for batteryGetPlugType: 8.34798812866ms
batteryGetPlugType :
2 

battery status data: 1 - unknown; 2 - charging; 3 - discharging; 4 - not charging; 5 - full;
total time for batteryGetStatus: 7.35282897949ms
batteryGetStatus :
3 

total time for batteryGetTechnology: 15.0377750397ms
batteryGetTechnology :
Li-ion 

total time for batteryGetTemperature: 14.8468017578ms
batteryGetTemperature :
255 

total time for batteryGetVoltage: 7.56692886353ms
batteryGetVoltage :
4147 

total time for readBatteryData: 7.96699523926ms
readBatteryData :
status : 3 
health : 2 
voltage : 4147 
temperature : 255 
level : 99 
battery_present : true 
technology : Li-ion 
plugged : 2 

total time for batteryStopMonitoring: 7.54117965698ms
batteryStopMonitoring :
null 


"""


dy_import_module_symbols("sensorutil")




def battery_start_monitoring(sl4a_socket):
  """
  <Purpose>
    Starts tracking battery state. 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    Data returned:
     {"error":null,"id":0,"result":null}
       
  """
  result = json_rpc(sl4a_socket, "batteryStartMonitoring")  
  return result
  




def battery_stop_monitoring(sl4a_socket):
  """
  <Purpose>
    Stops tracking battery state. 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    Data returned:
     {"error":null,"id":0,"result":null}
       
  """
  result = json_rpc(sl4a_socket, "batteryStopMonitoring")  
  return result
  
  
  
  
  
def battery_check_present(sl4a_socket):
  """
  <Purpose>
    Returns the most recently received battery presence data. 
    Min SDK level=5
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    Data returned:
     {"error":null,"id":0,"result":true}
       
  """
  result = json_rpc(sl4a_socket, "batteryCheckPresent")  
  return result
  
  
  
  
  

def battery_get_health(sl4a_socket):
  """
  <Purpose>
    Returns the most recently received battery health data:
	1 - unknown;
	2 - good;
	3 - overheat;
	4 - dead;
	5 - over voltage;
	6 - unspecified failure;
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    Data returned:
     E.g., {"error":null,"id":0,"result":2}
     
  """
  result = json_rpc(sl4a_socket, "batteryGetHealth")  
  return result
  
  
  
  
  


def battery_get_level(sl4a_socket):
  """
  <Purpose>
    Returns the most recently received battery level (percentage). 
    Min SDK level=5
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    Data returned:
     E.g., {"error":null,"id":0,"result":99}
     
  """
  result = json_rpc(sl4a_socket, "batteryGetLevel")  
  return result
  
  
  
  
  
  
def battery_get_plug_type(sl4a_socket):
  """
  <Purpose>
    Returns the most recently received plug type data:
	-1 - unknown
	0 - unplugged;
	1 - power source is an AC charger
	2 - power source is a USB port
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    Data returned:
     E.g., {"error":null,"id":0,"result":2}
     
  """
  result = json_rpc(sl4a_socket, "batteryGetPlugType")  
  return result
  
  
  
  
  
  
def battery_get_status(sl4a_socket):
  """
  <Purpose>
   Returns the most recently received battery status data:
	1 - unknown;
	2 - charging;
	3 - discharging;
	4 - not charging;
	5 - full;
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    Data returned:
     E.g., {"error":null,"id":0,"result":2}
     
  """
  result = json_rpc(sl4a_socket, "batteryGetStatus")  
  return result
  
  
  
  
  
  
def battery_get_technology(sl4a_socket):
  """
  <Purpose>
   Returns the most recently received battery technology data. 
   Min SDK level=5
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    Data returned:
     {"error":null,"id":0,"result":"Li-ion"}

     
  """
  result = json_rpc(sl4a_socket, "batteryGetTechnology")  
  return result 
  
  
  
  
  
  
def battery_get_temperature(sl4a_socket):
  """
  <Purpose>
   Returns the most recently received battery temperature. 
   Min SDK level=5
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    Data returned:
     {"error":null,"id":0,"result":269}
     I'm not sure the unit of 269...
     
  """
  result = json_rpc(sl4a_socket, "batteryGetTemperature")  
  return result
  
  
  
  
  
      
def battery_get_voltage(sl4a_socket):
  """
  <Purpose>
   Returns the most recently received battery voltage. 
   Min SDK level=5
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    Data returned:
     {"error":null,"id":0,"result":4140}
     
  """
  result = json_rpc(sl4a_socket, "batteryGetVoltage")  
  return result
  
  
  
  
  
def battery_read_data(sl4a_socket):
  """
  <Purpose>
   Returns the most recently recorded battery data.
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    Data returned:
     {"error":null,"id":0,"result":{"level":98,
     "technology":"Li-ion","status":3,"voltage":4140,
     "plugged":2,"battery_present":true,"health":2,
     "temperature":269}}
     this call provides all the info above in a dic..
     what's the point of all the above calls?
     
  """
  result = json_rpc(sl4a_socket, "readBatteryData")  
  return result

