"""
<Program>
  location.repy 
  Variables are mostly from: 
  http://www.mithril.com.au/android/doc/LocationFacade.html
	
<Date Started>
  December 19th, 2013
	
<Author>
  Yanyan Zhuang
	
<Purpose>
  Trying to use the SL4A JSON bridge to read location info
	 
"""

dy_import_module_symbols("sensorutil")



def location_providers(sl4a_socket):
  """
  <Purpose>
    Returns available providers on the phone. 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    {"error":null,"id":0,"result":["network","passive","gps"]}
       
  """
  result = json_rpc(sl4a_socket, "locationProviders")  
  return result
  
  



def location_provider_enabled(sl4a_socket, provider):
  """
  <Purpose>
    Ask if provider is enabled 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    provider - (String) Name of location provider, such as network, 
               gps, or passive
    
  <Return>
    {"error":null,"id":0,"result":true}
       
  """
  result = json_rpc(sl4a_socket, "locationProviderEnabled", provider) 
  return result
  





def location_start_locating(sl4a_socket, minDistance = 60000, 
                            minUpdateDistance = 30):
  """
  <Purpose>
    Starts collecting location data. 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    minDistance (Integer) minimum time between updates in 
                  milliseconds (default=60000) 
    minUpdateDistance (Integer) minimum distance between 
                  updates in meters (default=30)
    
  <Return>
    {"error":null,"id":0,"result":null}
       
  """
  # ignoring the other two parameters for now
  result = json_rpc(sl4a_socket, "startLocating") 
  return result
  
  




def location_read(sl4a_socket):
  """
  <Purpose>
    Returns the current location as indicated by all available 
    providers. 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    {"error":null,"id":0,"result":{"network":{"time":1386301597691,
    "speed":0,"altitude":0,"bearing":0,"provider":"network",
    "longitude":-123.2488612,"latitude":49.2611662,"accuracy":20}}}

       
  """
  # ignoring the other two parameters for now
  result = json_rpc(sl4a_socket, "readLocation") 
  return result
  
  
  
  
  

def location_get_last_known(sl4a_socket):
  """
  <Purpose>
    Returns the last known location of the device. 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    {"error":null,"id":0,"result":{
    "passive":{"time":1386292156814,"speed":0,"altitude":0,
              "bearing":0,"provider":"network",
              "longitude":-123.2485678,"latitude":49.2610633,
              "accuracy":36},
    "gps":{"time":1386229651000,"speed":1.634053349494934,
          "altitude":115,"bearing":235.37033081054688,
          "provider":"gps","longitude":-123.24900053036713,
          "latitude":49.26100681798307,"accuracy":40},
    "network":{"time":1386292156814,"speed":0,"altitude":0,
              "bearing":0,"provider":"network",
              "longitude":-123.2485678,"latitude":49.2610633,
              "accuracy":36}}}
       
  """
  # ignoring the other two parameters for now
  result = json_rpc(sl4a_socket, "getLastKnownLocation") 
  return result
  
  
  
  


def location_geocode(sl4a_socket, latitude, longitude, maxResults = 1):
  """
  <Purpose>
    Returns a list of addresses for the given latitude and longitude. 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    latitude (Double) 
    longitude (Double) 
    maxResults (Integer) maximum number of results (default=1) 
    
  <Return>
    {"error":null,"id":0,"result":[{"locality":"Vancouver",
    "admin_area":"British Columbia","thoroughfare":"Main Mall",
    "feature_name":"2366","country_code":"CA",
    "country_name":"Canada","postal_code":"V6T 1Z4"}]}

       
  """
  # ignoring the other two parameters for now
  # sometimes returns Service not Available...
  if maxResults != 1:
    result = json_rpc(sl4a_socket, "geocode", latitude, longitude, 
                      maxResults)
  else:
    result = json_rpc(sl4a_socket, "geocode", latitude, longitude)
     
  return result
  
  
  
  
  
    

def location_stop_locating(sl4a_socket):
  """
  <Purpose>
    Stops collecting location data. 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    {"error":null,"id":0,"result":null}
       
  """
  # ignoring the other two parameters for now
  result = json_rpc(sl4a_socket, "stopLocating") 
  return result

