"""
<Program>
  android.repy 
  Variables are mostly from: 
  http://www.mithril.com.au/android/doc/AndroidFacade.html
	
<Date Started>
  December 18th, 2013
	
<Author>
  Yanyan Zhuang
	
<Purpose>
  Trying to use the SL4A JSON bridge to read Android info
	 
"""

dy_import_module_symbols("sensorutil")


def android_get_environment(sl4a_socket):
  """
  <Purpose>
    Get various useful environment details 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    Data returned:
     TZ = Timezone
       id = Timezone ID
       display = Timezone display name
       offset = Offset from UTC (in ms)
     SDK = SDK Version
     download = default download path
     appcache = Location of application cache 
     sdcard = Space on sdcard
       availblocks = Available blocks
       blockcount = Total Blocks
       blocksize = size of block.
       
  """
  result = json_rpc(sl4a_socket, "environment")  
  return result
  




def android_get_intent(sl4a_socket):
  """
  <Purpose>
    Get the intent that launched the script.
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    Returns the intent that launched the script, e.g., 
    com.googlecode.android_scripting.action.LAUNCH_SERVER
    
  """
  result = json_rpc(sl4a_socket, "getIntent")  
  return result
  
  
  
  

def android_make_toast(sl4a_socket, toast_string):
  """
  <Purpose>
    Displays a short-duration Toast notification. 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    toast_string - the string you want to display as toast
    
  <Return>
    Returns a result, e.g., {"error":null,"id":0,"result":null}
    
  """
  result = json_rpc(sl4a_socket, "makeToast", toast_string)  
  return result
  
  
  
  
def android_notify(sl4a_socket, title, message):
  """
  <Purpose>
    Displays a notification that will be canceled when the user clicks on it. 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    title - the string of notification
    message - the string of the message to display
    
  <Return>
    Returns a result, e.g., {"error":null,"id":0,"result":null}
    
  """
  result = json_rpc(sl4a_socket, "notify", title, message)  
  return result
  
  
  
  
def android_vibrate(sl4a_socket, duration = None):
  """
  <Purpose>
    Vibrates the phone or a specified duration in milliseconds. 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    duration - duration in milliseconds (default=300)
    
  <Return>
    Returns a result, e.g., {"error":null,"id":0,"result":null}
    
  """
  if duration != None:
    result = json_rpc(sl4a_socket, "vibrate", duration)  
  else:
    result = json_rpc(sl4a_socket, "vibrate")
    
  return result
