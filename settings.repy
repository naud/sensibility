"""
<Program>
  settings.repy 
  Variables are mostly from: 
  http://www.mithril.com.au/android/doc/SettingsFacade.html
	
<Date Started>
  December 19th, 2013
	
<Author>
  Yanyan Zhuang
	
<Purpose>
  Trying to use the SL4A JSON bridge to read settings info
	 
"""

dy_import_module_symbols("sensorutil")



def settings_check_airplane_mode(sl4a_socket):
  """
  <Purpose>
    Checks the airplane mode setting. 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    (Boolean) True if airplane mode is enabled.
    E.g., {"error":null,"id":0,"result":false}
       
  """
  result = json_rpc(sl4a_socket, "checkAirplaneMode")  
  return result
  
  



def settings_check_ringer_silent_mode(sl4a_socket):
  """
  <Purpose>
    Checks the ringer silent mode setting. 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    (Boolean) True if ringer silent mode is enabled.
    E.g., {"error":null,"id":0,"result":false}
       
  """
  result = json_rpc(sl4a_socket, "checkRingerSilentMode")  
  return result






def settings_check_screen_on(sl4a_socket):
  """
  <Purpose>
    Checks if the screen is on or off (requires API level 7). 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    (Boolean) True if the screen is currently on.
    E.g., {"error":null,"id":0,"result":false}
       
  """
  result = json_rpc(sl4a_socket, "checkScreenOn")  
  return result





def settings_get_max_media_volume(sl4a_socket):
  """
  <Purpose>
    Returns the maximum media volume.
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    {"error":null,"id":0,"result":15}
       
  """
  result = json_rpc(sl4a_socket, "getMaxMediaVolume")  
  return result
  
  
  
  


def settings_get_max_ringer_volume(sl4a_socket):
  """
  <Purpose>
    Returns the maximum ringer volume.
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    {"error":null,"id":0,"result":7}
       
  """
  result = json_rpc(sl4a_socket, "getMaxRingerVolume")  
  return result







def settings_get_media_volume(sl4a_socket):
  """
  <Purpose>
    Returns the current media volume.
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    {"error":null,"id":0,"result":11}
       
  """
  result = json_rpc(sl4a_socket, "getMediaVolume")  
  return result
  
  
  
  
  

def settings_get_ringer_volume(sl4a_socket):
  """
  <Purpose>
    Returns the current ringer volume.
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    {"error":null,"id":0,"result":0}
       
  """
  result = json_rpc(sl4a_socket, "getRingerVolume")  
  return result






def settings_get_screen_brightness(sl4a_socket):
  """
  <Purpose>
    Returns the screen backlight brightness. 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    (Integer) the current screen brightness between 0 and 255
    {"error":null,"id":0,"result":102}
       
  """
  result = json_rpc(sl4a_socket, "getScreenBrightness")  
  return result
  





def settings_get_screen_timeout(sl4a_socket):
  """
  <Purpose>
    Returns the current screen timeout in seconds. 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    (Integer) the current screen timeout in seconds.
    {"error":null,"id":0,"result":102}
       
  """
  result = json_rpc(sl4a_socket, "getScreenTimeout")  
  return result






def settings_get_vibrate_mode(sl4a_socket, ringer = True):
  """
  <Purpose>
    Checks vibration setting. If ringer = true then query 
    Ringer setting, else query Notification setting 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    ringer (Boolean) If ringer = true then query Ringer 
                  setting, else query Notification setting 
    
  <Return>
    (Boolean) True if vibrate mode is enabled.
       
  """
  result = json_rpc(sl4a_socket, "getVibrateMode", ringer)  
  return result
