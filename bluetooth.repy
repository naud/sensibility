"""
<Program>
  bluetooth.repy 
  Variables are mostly from: 
  http://www.mithril.com.au/android/doc/BluetoothFacade.html
	
<Date Started>
  December 19th, 2013
	
<Author>
  Yanyan Zhuang
	
<Purpose>
  Trying to use the SL4A JSON bridge to read Bluetooth info
	 
"""

dy_import_module_symbols("sensorutil")



def bluetooth_check_state(sl4a_socket):
  """
  <Purpose>
    Checks Bluetooth state. 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    returns: (Boolean) True if Bluetooth is enabled.
       
  """
  result = json_rpc(sl4a_socket, "checkBluetoothState")  
  return result
  
  
  


def bluetooth_discovery_start(sl4a_socket):
  """
  <Purpose>
    Start the remote device discovery process. 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    (Boolean) true on success, false on error
    E.g., {"error":null,"id":0,"result":true}
       
  """
  result = json_rpc(sl4a_socket, "bluetoothDiscoveryStart")  
  return result
  





def bluetooth_get_local_address(sl4a_socket):
  """
  <Purpose>
    Returns the hardware address of the local Bluetooth adapter.
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    E.g., {"error":null,"id":0,"result":"60:A1:0A:90:E9:D7"}
       
  """
  result = json_rpc(sl4a_socket, "bluetoothGetLocalAddress")  
  return result
  
  
  
  
  

def bluetooth_get_local_name(sl4a_socket):
  """
  <Purpose>
    Gets the Bluetooth visible device name
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    E.g., {"error":null,"id":0,"result":"GT-P1000"}
       
  """
  result = json_rpc(sl4a_socket, "bluetoothGetLocalName")  
  return result
  
  
  
  

def bluetooth_set_local_name(sl4a_socket, name):
  """
  <Purpose>
    Sets the Bluetooth Visible device name, returns True on success 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    (Boolean) true on success, false on error
    E.g., {"error":null,"id":0,"result":true}
       
  """
  result = json_rpc(sl4a_socket, "bluetoothSetLocalName", name)  
  return result
  
  
  
  
    

def bluetooth_is_discovering(sl4a_socket):
  """
  <Purpose>
    Return true if the local Bluetooth adapter is currently in the 
    device discovery process.
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    E.g., {"error":null,"id":0,"result":true}
       
  """
  result = json_rpc(sl4a_socket, "bluetoothIsDiscovering")  
  return result
  
  
  
  


def bluetooth_get_scan_mode(sl4a_socket):
  """
  <Purpose>
    Gets the scan mode for the local dongle.
	Return values:
	-1 when Bluetooth is disabled.
	0 if non discoverable and non connectable.
	1 connectable non discoverable.
	3 connectable and discoverable.
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    {"error":null,"id":0,"result":1}
       
  """
  result = json_rpc(sl4a_socket, "bluetoothGetScanMode")  
  return result
  
  
  
  

def bluetooth_make_discoverable(sl4a_socket, duration = None):
  """
  <Purpose>
    Requests that the device be discoverable for Bluetooth connections. 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    duration (Integer) period of time, in seconds, during which the 
                  device should be discoverable (default=300)
    
  <Return>
    {"error":null,"id":0,"result":null}
       
  """
  if duration == None:
    result = json_rpc(sl4a_socket, "bluetoothMakeDiscoverable", 300)
  else: 
    result = json_rpc(sl4a_socket, "bluetoothMakeDiscoverable", duration)  
  return result
  
  
  
  
  
      
 
def bluetooth_discovery_cancel(sl4a_socket):
  """
  <Purpose>
    Cancel the current device discovery process. 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    (Boolean) true on success, false on error
    E.g., {"error":null,"id":0,"result":true}
       
  """
  result = json_rpc(sl4a_socket, "bluetoothDiscoveryCancel")  
  return result
