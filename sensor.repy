"""
<Program>
  sensor.repy 
  Variables are mostly from: 
  http://www.mithril.com.au/android/doc/SensorManagerFacade.html
	
<Date Started>
  December 19th, 2013
	
<Author>
  Yanyan Zhuang
	
<Purpose>
  Trying to use the SL4A JSON bridge to read sensor info
	 
"""

dy_import_module_symbols("sensorutil")



def sensor_start_sensing(sl4a_socket, sensorNumber, delayTime):
  """
  <Purpose>
    Starts recording sensor data to be available for polling. 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    sensorNumber (Integer) 1 = All, 2 = Accelerometer, 
                           3 = Magnetometer and 4 = Light
    delayTime (Integer) Minimum time between readings in milliseconds
    
  <Return>
    {"error":null,"id":0,"result":null} 

       
  """
  result = json_rpc(sl4a_socket, "startSensingTimed", sensorNumber, 
                   delayTime)  
  return result
  
  



def sensor_read(sl4a_socket):
  """
  <Purpose>
    Returns the most recently recorded sensor data.
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    {"error":null,"id":0,"result":{"time":1.386305361412E9,
    "roll":-0.034543427079916,"zforce":9.959879,"yforce":-0.842759,
    "yMag":164.9375,"xMag":-3.1875,"azimuth":0.005331491399556398,
    "xforce":0.3439138,"zMag":-67.75,"pitch":0.08443046659231186,
    "accuracy":3}}
       
  """
  result = json_rpc(sl4a_socket, "readSensors") 
  return result
  




def sensor_get_accuracy(sl4a_socket):
  """
  <Purpose>
    Returns the most recently received accuracy value.
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    {"error":null,"id":0,"result":3} 
       
  """
  result = json_rpc(sl4a_socket, "sensorsGetAccuracy")  
  return result
  
  



def sensor_get_light(sl4a_socket):
  """
  <Purpose>
    Returns the most recently received light value.
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    {"error":null,"id":0,"result":null} 
       
  """
  result = json_rpc(sl4a_socket, "sensorsGetLight")  
  return result
  
  
  
  
    
def sensor_read_accelerometer(sl4a_socket):
  """
  <Purpose>
    Returns the most recently received accelerometer values. 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    A list of Floats [(acceleration on the) X axis, Y axis, Z axis].
    E.g., {"error":null,"id":0,"result":[0.3830723,-0.8036005,10.036493]}
       
  """
  result = json_rpc(sl4a_socket, "sensorsReadAccelerometer") 
  return result
  
  
  
  
  

def sensor_read_magnetometer(sl4a_socket):
  """
  <Purpose>
    Returns the most recently received magnetic field values. 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    A list of Floats [(magnetic field value for) X axis, Y axis, Z axis].
    {"error":null,"id":0,"result":[29.5,206.875,-119.625]}
       
  """
  result = json_rpc(sl4a_socket, "sensorsReadMagnetometer") 
  return result
  
  
  
  
  
def sensor_read_orientation(sl4a_socket):
  """
  <Purpose>
    Returns the most recently received orientation values. 
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    A list of Doubles [azimuth, pitch, roll]
    {"error":null,"id":0,"result":[-0.17154279351234436,
    0.080450139939785,-0.03844258934259415]}
       
  """
  result = json_rpc(sl4a_socket, "sensorsReadOrientation") 
  return result
  
  
  
  
  
  

def sensor_stop_sensing(sl4a_socket):
  """
  <Purpose>
    Stops collecting sensor data.
    
  <Arguments>
    sl4a_socket - the socket that has been established for 
                  RPC communication
    
  <Return>
    {"error":null,"id":0,"result":null} 

       
  """
  result = json_rpc(sl4a_socket, "stopSensing")  
  return result
